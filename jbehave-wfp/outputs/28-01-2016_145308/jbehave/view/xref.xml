<xref>
  <stories>
    <performableStory>
      <story>
        <path>com/test/jbehave/stories/frontend/inladenKeuzemogelijkheden.story</path>
        <description>
          <descriptionAsString></descriptionAsString>
        </description>
        <narrative>
          <inOrderTo></inOrderTo>
          <asA></asA>
          <iWantTo></iWantTo>
          <soThat></soThat>
        </narrative>
        <meta>
          <properties/>
        </meta>
        <givenStories>
          <givenStories/>
          <givenStoriesAsString></givenStoriesAsString>
          <examplesTable>
            <tableAsString></tableAsString>
            <headerSeparator>|</headerSeparator>
            <valueSeparator>|</valueSeparator>
            <ignorableSeparator>|--</ignorableSeparator>
            <tableTransformers>
              <transformers>
                <entry>
                  <string>FROM_LANDSCAPE</string>
                  <fromLandscape/>
                </entry>
                <entry>
                  <string>REPLACING</string>
                  <replacing/>
                </entry>
                <entry>
                  <string>FORMATTING</string>
                  <formatting/>
                </entry>
              </transformers>
            </tableTransformers>
            <headers/>
            <data/>
            <properties>
              <property name="headerSeparator" value="|"/>
              <property name="valueSeparator" value="|"/>
              <property name="ignorableSeparator" value="|--"/>
            </properties>
            <propertiesAsString></propertiesAsString>
            <namedParameters/>
            <trim>true</trim>
          </examplesTable>
        </givenStories>
        <lifecycle>
          <before>
            <steps class="java.util.Arrays$ArrayList">
              <a class="string-array"/>
            </steps>
          </before>
          <after/>
        </lifecycle>
        <scenarios>
          <scenario>
            <title>form test aanmelding client, expand aanhef list</title>
            <meta>
              <properties>
                <property name="id1" value="scenario1"/>
              </properties>
            </meta>
            <givenStories>
              <givenStories/>
              <givenStoriesAsString></givenStoriesAsString>
              <examplesTable>
                <tableAsString></tableAsString>
                <headerSeparator>|</headerSeparator>
                <valueSeparator>|</valueSeparator>
                <ignorableSeparator>|--</ignorableSeparator>
                <tableTransformers>
                  <transformers>
                    <entry>
                      <string>FROM_LANDSCAPE</string>
                      <fromLandscape/>
                    </entry>
                    <entry>
                      <string>REPLACING</string>
                      <replacing/>
                    </entry>
                    <entry>
                      <string>FORMATTING</string>
                      <formatting/>
                    </entry>
                  </transformers>
                </tableTransformers>
                <headers/>
                <data/>
                <properties>
                  <property name="headerSeparator" value="|"/>
                  <property name="valueSeparator" value="|"/>
                  <property name="ignorableSeparator" value="|--"/>
                </properties>
                <propertiesAsString></propertiesAsString>
                <namedParameters/>
                <trim>true</trim>
              </examplesTable>
            </givenStories>
            <examplesTable>
              <tableAsString>|list|value1|value2|
|aanhef|Heer|Mevrouw|
|geslacht|Mannelijk|Vrouwelijk|
|burgerlijke staat|Gehuwd|Gescheiden|
|type relatie|Zoon|Dochter|</tableAsString>
              <headerSeparator>|</headerSeparator>
              <valueSeparator>|</valueSeparator>
              <ignorableSeparator>|--</ignorableSeparator>
              <tableTransformers>
                <transformers>
                  <entry>
                    <string>FROM_LANDSCAPE</string>
                    <fromLandscape/>
                  </entry>
                  <entry>
                    <string>REPLACING</string>
                    <replacing/>
                  </entry>
                  <entry>
                    <string>FORMATTING</string>
                    <formatting/>
                  </entry>
                </transformers>
              </tableTransformers>
              <headers>
                <string>list</string>
                <string>value1</string>
                <string>value2</string>
              </headers>
              <data>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>aanhef</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Heer</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Mevrouw</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>geslacht</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Mannelijk</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Vrouwelijk</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>burgerlijke staat</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Gehuwd</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Gescheiden</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>type relatie</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Zoon</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Dochter</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
              </data>
              <properties>
                <property name="headerSeparator" value="|"/>
                <property name="valueSeparator" value="|"/>
                <property name="ignorableSeparator" value="|--"/>
              </properties>
              <propertiesAsString></propertiesAsString>
              <namedParameters/>
              <trim>true</trim>
            </examplesTable>
            <steps>
              <string>Given the aanmelding client form is opened</string>
              <string>When I expand the &lt;list&gt; list</string>
              <string>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</string>
            </steps>
          </scenario>
        </scenarios>
        <name>inladenKeuzemogelijkheden.story</name>
      </story>
      <localizedNarrative>As a 
I want to 
So that </localizedNarrative>
      <allowed>true</allowed>
      <status>FAILED</status>
      <givenStories/>
      <scenarios>
        <performableScenario>
          <scenario>
            <title>form test aanmelding client, expand aanhef list</title>
            <meta>
              <properties>
                <property name="id1" value="scenario1"/>
              </properties>
            </meta>
            <givenStories>
              <givenStories/>
              <givenStoriesAsString></givenStoriesAsString>
              <examplesTable>
                <tableAsString></tableAsString>
                <headerSeparator>|</headerSeparator>
                <valueSeparator>|</valueSeparator>
                <ignorableSeparator>|--</ignorableSeparator>
                <tableTransformers>
                  <transformers>
                    <entry>
                      <string>FROM_LANDSCAPE</string>
                      <fromLandscape/>
                    </entry>
                    <entry>
                      <string>REPLACING</string>
                      <replacing/>
                    </entry>
                    <entry>
                      <string>FORMATTING</string>
                      <formatting/>
                    </entry>
                  </transformers>
                </tableTransformers>
                <headers/>
                <data/>
                <properties>
                  <property name="headerSeparator" value="|"/>
                  <property name="valueSeparator" value="|"/>
                  <property name="ignorableSeparator" value="|--"/>
                </properties>
                <propertiesAsString></propertiesAsString>
                <namedParameters/>
                <trim>true</trim>
              </examplesTable>
            </givenStories>
            <examplesTable>
              <tableAsString>|list|value1|value2|
|aanhef|Heer|Mevrouw|
|geslacht|Mannelijk|Vrouwelijk|
|burgerlijke staat|Gehuwd|Gescheiden|
|type relatie|Zoon|Dochter|</tableAsString>
              <headerSeparator>|</headerSeparator>
              <valueSeparator>|</valueSeparator>
              <ignorableSeparator>|--</ignorableSeparator>
              <tableTransformers>
                <transformers>
                  <entry>
                    <string>FROM_LANDSCAPE</string>
                    <fromLandscape/>
                  </entry>
                  <entry>
                    <string>REPLACING</string>
                    <replacing/>
                  </entry>
                  <entry>
                    <string>FORMATTING</string>
                    <formatting/>
                  </entry>
                </transformers>
              </tableTransformers>
              <headers>
                <string>list</string>
                <string>value1</string>
                <string>value2</string>
              </headers>
              <data>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>aanhef</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Heer</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Mevrouw</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>geslacht</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Mannelijk</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Vrouwelijk</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>burgerlijke staat</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Gehuwd</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Gescheiden</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
                <linked-hash-map>
                  <entry>
                    <string>list</string>
                    <string>type relatie</string>
                  </entry>
                  <entry>
                    <string>value1</string>
                    <string>Zoon</string>
                  </entry>
                  <entry>
                    <string>value2</string>
                    <string>Dochter</string>
                  </entry>
                  <entry>
                    <string>id1</string>
                    <string>scenario1</string>
                  </entry>
                </linked-hash-map>
              </data>
              <properties>
                <property name="headerSeparator" value="|"/>
                <property name="valueSeparator" value="|"/>
                <property name="ignorableSeparator" value="|--"/>
              </properties>
              <propertiesAsString></propertiesAsString>
              <namedParameters/>
              <trim>true</trim>
            </examplesTable>
            <steps>
              <string>Given the aanmelding client form is opened</string>
              <string>When I expand the &lt;list&gt; list</string>
              <string>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</string>
            </steps>
          </scenario>
          <storyPath>com/test/jbehave/stories/frontend/inladenKeuzemogelijkheden.story</storyPath>
          <allowed>true</allowed>
          <examplePerformableScenarios>
            <examplePerformableScenario>
              <parameters class="linked-hash-map">
                <entry>
                  <string>list</string>
                  <string>aanhef</string>
                </entry>
                <entry>
                  <string>value1</string>
                  <string>Heer</string>
                </entry>
                <entry>
                  <string>value2</string>
                  <string>Mevrouw</string>
                </entry>
                <entry>
                  <string>id1</string>
                  <string>scenario1</string>
                </entry>
              </parameters>
              <givenStories/>
              <beforeSteps>
                <matches/>
              </beforeSteps>
              <steps>
                <matches>
                  <stepMatch>
                    <type>THEN</type>
                    <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                    <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>WHEN</type>
                    <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                    <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>GIVEN</type>
                    <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                    <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
                  </stepMatch>
                </matches>
                <results>
                  <successful>
                    <step>Given the aanmelding client form is opened</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                    <durationInMillis>11125</durationInMillis>
                  </successful>
                  <successful>
                    <step>When I expand the &lt;list&gt; list</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>When I expand the ｟aanhef｠ list</parametrisedStep>
                    <durationInMillis>9992</durationInMillis>
                  </successful>
                  <failed>
                    <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                    <type>FAILED</type>
                    <throwable>
                      <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                      <cause class="java.lang.AssertionError">
                        <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                        <stackTrace>
                          <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                          <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                          <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                          <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                          <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                          <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                          <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                          <trace>java.lang.Thread.run(Thread.java:745)</trace>
                        </stackTrace>
                        <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                          <c class="list"/>
                          <list/>
                        </suppressedExceptions>
                      </cause>
                      <stackTrace>
                        <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                        <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                        <trace>java.lang.Thread.run(Thread.java:745)</trace>
                      </stackTrace>
                      <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                        <c class="list"/>
                        <list/>
                      </suppressedExceptions>
                      <uuid>cbf92223-c1e5-44ea-8153-e9adbc92ac84</uuid>
                    </throwable>
                    <parametrisedStep>Then the list should be filled with at least ｟Heer｠ and ｟Mevrouw｠</parametrisedStep>
                    <durationInMillis>306</durationInMillis>
                  </failed>
                </results>
              </steps>
              <afterSteps>
                <matches/>
              </afterSteps>
            </examplePerformableScenario>
            <examplePerformableScenario>
              <parameters class="linked-hash-map">
                <entry>
                  <string>list</string>
                  <string>geslacht</string>
                </entry>
                <entry>
                  <string>value1</string>
                  <string>Mannelijk</string>
                </entry>
                <entry>
                  <string>value2</string>
                  <string>Vrouwelijk</string>
                </entry>
                <entry>
                  <string>id1</string>
                  <string>scenario1</string>
                </entry>
              </parameters>
              <givenStories/>
              <beforeSteps>
                <matches/>
              </beforeSteps>
              <steps>
                <matches>
                  <stepMatch>
                    <type>THEN</type>
                    <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                    <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>WHEN</type>
                    <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                    <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>GIVEN</type>
                    <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                    <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
                  </stepMatch>
                </matches>
                <results>
                  <successful>
                    <step>Given the aanmelding client form is opened</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                    <durationInMillis>0</durationInMillis>
                  </successful>
                  <successful>
                    <step>When I expand the &lt;list&gt; list</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>When I expand the ｟geslacht｠ list</parametrisedStep>
                    <durationInMillis>173</durationInMillis>
                  </successful>
                  <failed>
                    <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                    <type>FAILED</type>
                    <throwable>
                      <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                      <cause class="java.lang.AssertionError">
                        <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                        <stackTrace>
                          <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                          <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                          <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                          <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                          <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                          <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                          <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                          <trace>java.lang.Thread.run(Thread.java:745)</trace>
                        </stackTrace>
                        <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                          <c class="list"/>
                          <list/>
                        </suppressedExceptions>
                      </cause>
                      <stackTrace>
                        <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                        <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                        <trace>java.lang.Thread.run(Thread.java:745)</trace>
                      </stackTrace>
                      <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                        <c class="list"/>
                        <list/>
                      </suppressedExceptions>
                      <uuid>6e36eb3a-5ec8-47b1-bf40-723aead8af61</uuid>
                    </throwable>
                    <parametrisedStep>Then the list should be filled with at least ｟Mannelijk｠ and ｟Vrouwelijk｠</parametrisedStep>
                    <durationInMillis>298</durationInMillis>
                  </failed>
                </results>
              </steps>
              <afterSteps>
                <matches/>
              </afterSteps>
            </examplePerformableScenario>
            <examplePerformableScenario>
              <parameters class="linked-hash-map">
                <entry>
                  <string>list</string>
                  <string>burgerlijke staat</string>
                </entry>
                <entry>
                  <string>value1</string>
                  <string>Gehuwd</string>
                </entry>
                <entry>
                  <string>value2</string>
                  <string>Gescheiden</string>
                </entry>
                <entry>
                  <string>id1</string>
                  <string>scenario1</string>
                </entry>
              </parameters>
              <givenStories/>
              <beforeSteps>
                <matches/>
              </beforeSteps>
              <steps>
                <matches>
                  <stepMatch>
                    <type>THEN</type>
                    <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                    <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>WHEN</type>
                    <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                    <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>GIVEN</type>
                    <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                    <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
                  </stepMatch>
                </matches>
                <results>
                  <successful>
                    <step>Given the aanmelding client form is opened</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                    <durationInMillis>0</durationInMillis>
                  </successful>
                  <successful>
                    <step>When I expand the &lt;list&gt; list</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>When I expand the ｟burgerlijke staat｠ list</parametrisedStep>
                    <durationInMillis>195</durationInMillis>
                  </successful>
                  <failed>
                    <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                    <type>FAILED</type>
                    <throwable>
                      <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                      <cause class="java.lang.AssertionError">
                        <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                        <stackTrace>
                          <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                          <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                          <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                          <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                          <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                          <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                          <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                          <trace>java.lang.Thread.run(Thread.java:745)</trace>
                        </stackTrace>
                        <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                          <c class="list"/>
                          <list/>
                        </suppressedExceptions>
                      </cause>
                      <stackTrace>
                        <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                        <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                        <trace>java.lang.Thread.run(Thread.java:745)</trace>
                      </stackTrace>
                      <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                        <c class="list"/>
                        <list/>
                      </suppressedExceptions>
                      <uuid>f682bb8b-fc02-4c2c-a852-eb72ba066901</uuid>
                    </throwable>
                    <parametrisedStep>Then the list should be filled with at least ｟Gehuwd｠ and ｟Gescheiden｠</parametrisedStep>
                    <durationInMillis>281</durationInMillis>
                  </failed>
                </results>
              </steps>
              <afterSteps>
                <matches/>
              </afterSteps>
            </examplePerformableScenario>
            <examplePerformableScenario>
              <parameters class="linked-hash-map">
                <entry>
                  <string>list</string>
                  <string>type relatie</string>
                </entry>
                <entry>
                  <string>value1</string>
                  <string>Zoon</string>
                </entry>
                <entry>
                  <string>value2</string>
                  <string>Dochter</string>
                </entry>
                <entry>
                  <string>id1</string>
                  <string>scenario1</string>
                </entry>
              </parameters>
              <givenStories/>
              <beforeSteps>
                <matches/>
              </beforeSteps>
              <steps>
                <matches>
                  <stepMatch>
                    <type>THEN</type>
                    <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                    <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>WHEN</type>
                    <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                    <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
                  </stepMatch>
                  <stepMatch>
                    <type>GIVEN</type>
                    <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                    <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
                  </stepMatch>
                </matches>
                <results>
                  <successful>
                    <step>Given the aanmelding client form is opened</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                    <durationInMillis>0</durationInMillis>
                  </successful>
                  <successful>
                    <step>When I expand the &lt;list&gt; list</step>
                    <type>SUCCESSFUL</type>
                    <parametrisedStep>When I expand the ｟type relatie｠ list</parametrisedStep>
                    <durationInMillis>202</durationInMillis>
                  </successful>
                  <failed>
                    <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                    <type>FAILED</type>
                    <throwable>
                      <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                      <cause class="java.lang.AssertionError">
                        <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                        <stackTrace>
                          <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                          <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                          <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                          <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                          <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                          <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                          <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                          <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                          <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                          <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                          <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                          <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                          <trace>java.lang.Thread.run(Thread.java:745)</trace>
                        </stackTrace>
                        <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                          <c class="list"/>
                          <list/>
                        </suppressedExceptions>
                      </cause>
                      <stackTrace>
                        <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                        <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                        <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                        <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                        <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                        <trace>java.lang.Thread.run(Thread.java:745)</trace>
                      </stackTrace>
                      <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                        <c class="list"/>
                        <list/>
                      </suppressedExceptions>
                      <uuid>9259c9f6-b9cf-40f1-a071-cf56be71328e</uuid>
                    </throwable>
                    <parametrisedStep>Then the list should be filled with at least ｟Zoon｠ and ｟Dochter｠</parametrisedStep>
                    <durationInMillis>1267</durationInMillis>
                  </failed>
                </results>
              </steps>
              <afterSteps>
                <matches/>
              </afterSteps>
            </examplePerformableScenario>
          </examplePerformableScenarios>
          <status>FAILED</status>
        </performableScenario>
      </scenarios>
      <beforeSteps/>
      <afterSteps/>
      <timing>
        <durationInMillis>23880</durationInMillis>
      </timing>
      <givenStory>false</givenStory>
    </performableStory>
  </stories>
  <scenarios>
    <performableScenario>
      <scenario>
        <title>form test aanmelding client, expand aanhef list</title>
        <meta>
          <properties>
            <property name="id1" value="scenario1"/>
          </properties>
        </meta>
        <givenStories>
          <givenStories/>
          <givenStoriesAsString></givenStoriesAsString>
          <examplesTable>
            <tableAsString></tableAsString>
            <headerSeparator>|</headerSeparator>
            <valueSeparator>|</valueSeparator>
            <ignorableSeparator>|--</ignorableSeparator>
            <tableTransformers>
              <transformers>
                <entry>
                  <string>FROM_LANDSCAPE</string>
                  <fromLandscape/>
                </entry>
                <entry>
                  <string>REPLACING</string>
                  <replacing/>
                </entry>
                <entry>
                  <string>FORMATTING</string>
                  <formatting/>
                </entry>
              </transformers>
            </tableTransformers>
            <headers/>
            <data/>
            <properties>
              <property name="headerSeparator" value="|"/>
              <property name="valueSeparator" value="|"/>
              <property name="ignorableSeparator" value="|--"/>
            </properties>
            <propertiesAsString></propertiesAsString>
            <namedParameters/>
            <trim>true</trim>
          </examplesTable>
        </givenStories>
        <examplesTable>
          <tableAsString>|list|value1|value2|
|aanhef|Heer|Mevrouw|
|geslacht|Mannelijk|Vrouwelijk|
|burgerlijke staat|Gehuwd|Gescheiden|
|type relatie|Zoon|Dochter|</tableAsString>
          <headerSeparator>|</headerSeparator>
          <valueSeparator>|</valueSeparator>
          <ignorableSeparator>|--</ignorableSeparator>
          <tableTransformers>
            <transformers>
              <entry>
                <string>FROM_LANDSCAPE</string>
                <fromLandscape/>
              </entry>
              <entry>
                <string>REPLACING</string>
                <replacing/>
              </entry>
              <entry>
                <string>FORMATTING</string>
                <formatting/>
              </entry>
            </transformers>
          </tableTransformers>
          <headers>
            <string>list</string>
            <string>value1</string>
            <string>value2</string>
          </headers>
          <data>
            <linked-hash-map>
              <entry>
                <string>list</string>
                <string>aanhef</string>
              </entry>
              <entry>
                <string>value1</string>
                <string>Heer</string>
              </entry>
              <entry>
                <string>value2</string>
                <string>Mevrouw</string>
              </entry>
              <entry>
                <string>id1</string>
                <string>scenario1</string>
              </entry>
            </linked-hash-map>
            <linked-hash-map>
              <entry>
                <string>list</string>
                <string>geslacht</string>
              </entry>
              <entry>
                <string>value1</string>
                <string>Mannelijk</string>
              </entry>
              <entry>
                <string>value2</string>
                <string>Vrouwelijk</string>
              </entry>
              <entry>
                <string>id1</string>
                <string>scenario1</string>
              </entry>
            </linked-hash-map>
            <linked-hash-map>
              <entry>
                <string>list</string>
                <string>burgerlijke staat</string>
              </entry>
              <entry>
                <string>value1</string>
                <string>Gehuwd</string>
              </entry>
              <entry>
                <string>value2</string>
                <string>Gescheiden</string>
              </entry>
              <entry>
                <string>id1</string>
                <string>scenario1</string>
              </entry>
            </linked-hash-map>
            <linked-hash-map>
              <entry>
                <string>list</string>
                <string>type relatie</string>
              </entry>
              <entry>
                <string>value1</string>
                <string>Zoon</string>
              </entry>
              <entry>
                <string>value2</string>
                <string>Dochter</string>
              </entry>
              <entry>
                <string>id1</string>
                <string>scenario1</string>
              </entry>
            </linked-hash-map>
          </data>
          <properties>
            <property name="headerSeparator" value="|"/>
            <property name="valueSeparator" value="|"/>
            <property name="ignorableSeparator" value="|--"/>
          </properties>
          <propertiesAsString></propertiesAsString>
          <namedParameters/>
          <trim>true</trim>
        </examplesTable>
        <steps>
          <string>Given the aanmelding client form is opened</string>
          <string>When I expand the &lt;list&gt; list</string>
          <string>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</string>
        </steps>
      </scenario>
      <storyPath>com/test/jbehave/stories/frontend/inladenKeuzemogelijkheden.story</storyPath>
      <allowed>true</allowed>
      <examplePerformableScenarios>
        <examplePerformableScenario>
          <parameters class="linked-hash-map">
            <entry>
              <string>list</string>
              <string>aanhef</string>
            </entry>
            <entry>
              <string>value1</string>
              <string>Heer</string>
            </entry>
            <entry>
              <string>value2</string>
              <string>Mevrouw</string>
            </entry>
            <entry>
              <string>id1</string>
              <string>scenario1</string>
            </entry>
          </parameters>
          <givenStories/>
          <beforeSteps>
            <matches/>
          </beforeSteps>
          <steps>
            <matches>
              <stepMatch>
                <type>THEN</type>
                <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>WHEN</type>
                <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>GIVEN</type>
                <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
              </stepMatch>
            </matches>
            <results>
              <successful>
                <step>Given the aanmelding client form is opened</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                <durationInMillis>11125</durationInMillis>
              </successful>
              <successful>
                <step>When I expand the &lt;list&gt; list</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>When I expand the ｟aanhef｠ list</parametrisedStep>
                <durationInMillis>9992</durationInMillis>
              </successful>
              <failed>
                <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                <type>FAILED</type>
                <throwable>
                  <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                  <cause class="java.lang.AssertionError">
                    <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                    <stackTrace>
                      <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                      <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                      <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                      <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                      <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                      <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                      <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                      <trace>java.lang.Thread.run(Thread.java:745)</trace>
                    </stackTrace>
                    <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                      <c class="list"/>
                      <list/>
                    </suppressedExceptions>
                  </cause>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>cbf92223-c1e5-44ea-8153-e9adbc92ac84</uuid>
                </throwable>
                <parametrisedStep>Then the list should be filled with at least ｟Heer｠ and ｟Mevrouw｠</parametrisedStep>
                <durationInMillis>306</durationInMillis>
              </failed>
            </results>
          </steps>
          <afterSteps>
            <matches/>
          </afterSteps>
        </examplePerformableScenario>
        <examplePerformableScenario>
          <parameters class="linked-hash-map">
            <entry>
              <string>list</string>
              <string>geslacht</string>
            </entry>
            <entry>
              <string>value1</string>
              <string>Mannelijk</string>
            </entry>
            <entry>
              <string>value2</string>
              <string>Vrouwelijk</string>
            </entry>
            <entry>
              <string>id1</string>
              <string>scenario1</string>
            </entry>
          </parameters>
          <givenStories/>
          <beforeSteps>
            <matches/>
          </beforeSteps>
          <steps>
            <matches>
              <stepMatch>
                <type>THEN</type>
                <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>WHEN</type>
                <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>GIVEN</type>
                <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
              </stepMatch>
            </matches>
            <results>
              <successful>
                <step>Given the aanmelding client form is opened</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                <durationInMillis>0</durationInMillis>
              </successful>
              <successful>
                <step>When I expand the &lt;list&gt; list</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>When I expand the ｟geslacht｠ list</parametrisedStep>
                <durationInMillis>173</durationInMillis>
              </successful>
              <failed>
                <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                <type>FAILED</type>
                <throwable>
                  <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                  <cause class="java.lang.AssertionError">
                    <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                    <stackTrace>
                      <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                      <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                      <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                      <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                      <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                      <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                      <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                      <trace>java.lang.Thread.run(Thread.java:745)</trace>
                    </stackTrace>
                    <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                      <c class="list"/>
                      <list/>
                    </suppressedExceptions>
                  </cause>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>6e36eb3a-5ec8-47b1-bf40-723aead8af61</uuid>
                </throwable>
                <parametrisedStep>Then the list should be filled with at least ｟Mannelijk｠ and ｟Vrouwelijk｠</parametrisedStep>
                <durationInMillis>298</durationInMillis>
              </failed>
            </results>
          </steps>
          <afterSteps>
            <matches/>
          </afterSteps>
        </examplePerformableScenario>
        <examplePerformableScenario>
          <parameters class="linked-hash-map">
            <entry>
              <string>list</string>
              <string>burgerlijke staat</string>
            </entry>
            <entry>
              <string>value1</string>
              <string>Gehuwd</string>
            </entry>
            <entry>
              <string>value2</string>
              <string>Gescheiden</string>
            </entry>
            <entry>
              <string>id1</string>
              <string>scenario1</string>
            </entry>
          </parameters>
          <givenStories/>
          <beforeSteps>
            <matches/>
          </beforeSteps>
          <steps>
            <matches>
              <stepMatch>
                <type>THEN</type>
                <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>WHEN</type>
                <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>GIVEN</type>
                <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
              </stepMatch>
            </matches>
            <results>
              <successful>
                <step>Given the aanmelding client form is opened</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                <durationInMillis>0</durationInMillis>
              </successful>
              <successful>
                <step>When I expand the &lt;list&gt; list</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>When I expand the ｟burgerlijke staat｠ list</parametrisedStep>
                <durationInMillis>195</durationInMillis>
              </successful>
              <failed>
                <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                <type>FAILED</type>
                <throwable>
                  <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                  <cause class="java.lang.AssertionError">
                    <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                    <stackTrace>
                      <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                      <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                      <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                      <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                      <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                      <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                      <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                      <trace>java.lang.Thread.run(Thread.java:745)</trace>
                    </stackTrace>
                    <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                      <c class="list"/>
                      <list/>
                    </suppressedExceptions>
                  </cause>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>f682bb8b-fc02-4c2c-a852-eb72ba066901</uuid>
                </throwable>
                <parametrisedStep>Then the list should be filled with at least ｟Gehuwd｠ and ｟Gescheiden｠</parametrisedStep>
                <durationInMillis>281</durationInMillis>
              </failed>
            </results>
          </steps>
          <afterSteps>
            <matches/>
          </afterSteps>
        </examplePerformableScenario>
        <examplePerformableScenario>
          <parameters class="linked-hash-map">
            <entry>
              <string>list</string>
              <string>type relatie</string>
            </entry>
            <entry>
              <string>value1</string>
              <string>Zoon</string>
            </entry>
            <entry>
              <string>value2</string>
              <string>Dochter</string>
            </entry>
            <entry>
              <string>id1</string>
              <string>scenario1</string>
            </entry>
          </parameters>
          <givenStories/>
          <beforeSteps>
            <matches/>
          </beforeSteps>
          <steps>
            <matches>
              <stepMatch>
                <type>THEN</type>
                <annotatedPattern>the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</annotatedPattern>
                <resolvedPattern>the\s+list\s+should\s+be\s+filled\s+with\s+at\s+least\s+&lt;value1&gt;\s+and\s+&lt;value2&gt;</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>WHEN</type>
                <annotatedPattern>I expand the &lt;list&gt; list</annotatedPattern>
                <resolvedPattern>I\s+expand\s+the\s+&lt;list&gt;\s+list</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>GIVEN</type>
                <annotatedPattern>the aanmelding client form is opened</annotatedPattern>
                <resolvedPattern>the\s+aanmelding\s+client\s+form\s+is\s+opened</resolvedPattern>
              </stepMatch>
            </matches>
            <results>
              <successful>
                <step>Given the aanmelding client form is opened</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>Given the aanmelding client form is opened</parametrisedStep>
                <durationInMillis>0</durationInMillis>
              </successful>
              <successful>
                <step>When I expand the &lt;list&gt; list</step>
                <type>SUCCESSFUL</type>
                <parametrisedStep>When I expand the ｟type relatie｠ list</parametrisedStep>
                <durationInMillis>202</durationInMillis>
              </successful>
              <failed>
                <step>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</step>
                <type>FAILED</type>
                <throwable>
                  <detailMessage>Then the list should be filled with at least &lt;value1&gt; and &lt;value2&gt;</detailMessage>
                  <cause class="java.lang.AssertionError">
                    <detailMessage>expected:&lt;true&gt; but was:&lt;false&gt;</detailMessage>
                    <stackTrace>
                      <trace>org.junit.Assert.fail(Assert.java:88)</trace>
                      <trace>org.junit.Assert.failNotEquals(Assert.java:743)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:118)</trace>
                      <trace>org.junit.Assert.assertEquals(Assert.java:144)</trace>
                      <trace>com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:88)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</trace>
                      <trace>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</trace>
                      <trace>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</trace>
                      <trace>java.lang.reflect.Method.invoke(Method.java:606)</trace>
                      <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                      <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                      <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                      <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                      <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                      <trace>java.lang.Thread.run(Thread.java:745)</trace>
                    </stackTrace>
                    <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                      <c class="list"/>
                      <list/>
                    </suppressedExceptions>
                  </cause>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:262)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>9259c9f6-b9cf-40f1-a071-cf56be71328e</uuid>
                </throwable>
                <parametrisedStep>Then the list should be filled with at least ｟Zoon｠ and ｟Dochter｠</parametrisedStep>
                <durationInMillis>1267</durationInMillis>
              </failed>
            </results>
          </steps>
          <afterSteps>
            <matches/>
          </afterSteps>
        </examplePerformableScenario>
      </examplePerformableScenarios>
      <status>FAILED</status>
    </performableScenario>
  </scenarios>
</xref>