{"xref": {
  "stories": [
    {
      "story": {
        "path": "com/test/jbehave/stories/Javascript/javascriptTest.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "scenario description",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given a google page is opened",
              "When I execute a javascript",
              "Then the script should be executed"
            ]
          }
        ],
        "name": "javascriptTest.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "scenario description",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given a google page is opened",
              "When I execute a javascript",
              "Then the script should be executed"
            ]
          },
          "storyPath": "com/test/jbehave/stories/Javascript/javascriptTest.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "WHEN",
                  "annotatedPattern": "I execute a javascript",
                  "resolvedPattern": "I\\s+execute\\s+a\\s+javascript"
                },
                {
                  "type": "THEN",
                  "annotatedPattern": "the script should be executed",
                  "resolvedPattern": "the\\s+script\\s+should\\s+be\\s+executed"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "a google page is opened",
                  "resolvedPattern": "a\\s+google\\s+page\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given a google page is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given a google page is opened",
                  "durationInMillis": 4402
                },
                {
                  "step": "When I execute a javascript",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I execute a javascript",
                  "durationInMillis": 59
                },
                {
                  "step": "Then the script should be executed",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then the script should be executed",
                  "durationInMillis": 5560
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "scenario description",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given a google page is opened",
                "When I execute a javascript",
                "Then the script should be executed"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 10025
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/backend/backendLogin.story",
        "description": {
          "descriptionAsString": "Story: backend Login"
        },
        "narrative": {
          "inOrderTo": "access the workflow4people backend",
          "asA": "demo user",
          "iWantTo": "login into the application",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "A workflo4people backend login attempt with invalid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people backend is started",
              "When I enter invalid backend credentials",
              "And I log in to the backend",
              "Then I should not be logged in to the backend"
            ]
          },
          {
            "title": "A workflo4people backend login attempt with valid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id2",
                  "@value": "scenario2"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people backend is started",
              "When I enter valid backend credentials",
              "And I log in to the backend",
              "Then I should be logged in to the backend"
            ]
          }
        ],
        "name": "backendLogin.story"
      },
      "localizedNarrative": "In order to access the workflow4people backend\nAs a demo user\nI want to login into the application",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "A workflo4people backend login attempt with invalid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people backend is started",
              "When I enter invalid backend credentials",
              "And I log in to the backend",
              "Then I should not be logged in to the backend"
            ]
          },
          "storyPath": "com/test/jbehave/stories/backend/backendLogin.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "THEN",
                  "annotatedPattern": "I should not be logged in to the backend",
                  "resolvedPattern": "I\\s+should\\s+not\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+backend"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "The workflow4people backend is started",
                  "resolvedPattern": "The\\s+workflow4people\\s+backend\\s+is\\s+started"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter invalid backend credentials",
                  "resolvedPattern": "I\\s+enter\\s+invalid\\s+backend\\s+credentials"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I log in to the backend",
                  "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+backend"
                }
              ],
              "results": [
                {
                  "step": "Given The workflow4people backend is started",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given The workflow4people backend is started",
                  "durationInMillis": 4722
                },
                {
                  "step": "When I enter invalid backend credentials",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter invalid backend credentials",
                  "durationInMillis": 228
                },
                {
                  "step": "And I log in to the backend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "And I log in to the backend",
                  "durationInMillis": 5650
                },
                {
                  "step": "Then I should not be logged in to the backend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then I should not be logged in to the backend",
                  "durationInMillis": 558
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "A workflo4people backend login attempt with invalid credentials",
              "meta": {
                "properties": [
                  {
                    "@name": "id1",
                    "@value": "scenario1"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given The workflow4people backend is started",
                "When I enter invalid backend credentials",
                "And I log in to the backend",
                "Then I should not be logged in to the backend"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        },
        {
          "scenario": {
            "title": "A workflo4people backend login attempt with valid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id2",
                  "@value": "scenario2"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people backend is started",
              "When I enter valid backend credentials",
              "And I log in to the backend",
              "Then I should be logged in to the backend"
            ]
          },
          "storyPath": "com/test/jbehave/stories/backend/backendLogin.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter valid backend credentials",
                  "resolvedPattern": "I\\s+enter\\s+valid\\s+backend\\s+credentials"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "The workflow4people backend is started",
                  "resolvedPattern": "The\\s+workflow4people\\s+backend\\s+is\\s+started"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I log in to the backend",
                  "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+backend"
                },
                {
                  "type": "THEN",
                  "annotatedPattern": "I should be logged in to the backend",
                  "resolvedPattern": "I\\s+should\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+backend"
                }
              ],
              "results": [
                {
                  "step": "Given The workflow4people backend is started",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given The workflow4people backend is started",
                  "durationInMillis": 2716
                },
                {
                  "step": "When I enter valid backend credentials",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter valid backend credentials",
                  "durationInMillis": 251
                },
                {
                  "step": "And I log in to the backend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "And I log in to the backend",
                  "durationInMillis": 3596
                },
                {
                  "step": "Then I should be logged in to the backend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then I should be logged in to the backend",
                  "durationInMillis": 556
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "A workflo4people backend login attempt with valid credentials",
              "meta": {
                "properties": [
                  {
                    "@name": "id2",
                    "@value": "scenario2"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given The workflow4people backend is started",
                "When I enter valid backend credentials",
                "And I log in to the backend",
                "Then I should be logged in to the backend"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 18282
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/backend/makeUser.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "admin",
          "iWantTo": "be able to add new users",
          "soThat": "I can allow new users to use the platform"
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "scenario description",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the person list is opened",
              "When I make a new test user",
              "Then the user should be added"
            ]
          }
        ],
        "name": "makeUser.story"
      },
      "localizedNarrative": "As a admin\nI want to be able to add new users\nSo that I can allow new users to use the platform",
      "allowed": true,
      "status": "FAILED",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "scenario description",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the person list is opened",
              "When I make a new test user",
              "Then the user should be added"
            ]
          },
          "storyPath": "com/test/jbehave/stories/backend/makeUser.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "THEN",
                  "annotatedPattern": "the user should be added",
                  "resolvedPattern": "the\\s+user\\s+should\\s+be\\s+added"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I make a new test user",
                  "resolvedPattern": "I\\s+make\\s+a\\s+new\\s+test\\s+user"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the person list is opened",
                  "resolvedPattern": "the\\s+person\\s+list\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given the person list is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the person list is opened",
                  "durationInMillis": 9953
                },
                {
                  "step": "When I make a new test user",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I make a new test user",
                  "durationInMillis": 2847
                },
                {
                  "step": "Then the user should be added",
                  "type": "FAILED",
                  "throwable": {
                    "detailMessage": "Then the user should be added",
                    "cause": {
                      "@class": "org.openqa.selenium.WebDriverException",
                      "detailMessage": "unknown error: Element is not clickable at point (44, 189). Other element would receive the click: <div class=\"ui-widget-overlay\" style=\"width: 1025px; height: 744px; z-index: 1001;\"></div>\n  (Session info: chrome=46.0.2490.80)\n  (Driver info: chromedriver=2.20.353141 (da3cb4b52d3a04ce079546eac4dc96182f58602b),platform=Linux 3.13.0-66-generic x86) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 68 milliseconds",
                      "stackTrace": [
                        "sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
                        "sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)",
                        "sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)",
                        "java.lang.reflect.Constructor.newInstance(Constructor.java:526)",
                        "org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:206)",
                        "org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:158)",
                        "org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:647)",
                        "org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:326)",
                        "org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:84)",
                        "com.test.jbehave.pages.UserPage.checkUserWasAdded(UserPage.java:89)",
                        "com.test.jbehave.steps.backend.MakeUserSteps.validateUser(MakeUserSteps.java:45)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                        "java.lang.reflect.Method.invoke(Method.java:606)",
                        "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                        "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                        "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                        "java.lang.Thread.run(Thread.java:745)"
                      ],
                      "suppressedExceptions": [
                        [],
                        []
                      ],
                      "extraInfo": [
                        [
                          "Session ID",
                          "896ceb13b5349f8636dc090021b197a1"
                        ],
                        [
                          "Driver info",
                          "org.openqa.selenium.chrome.ChromeDriver"
                        ],
                        [
                          "Capabilities",
                          "Capabilities [{platform=LINUX, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/tmp/.com.google.Chrome.naQNHZ}, rotatable=false, locationContextEnabled=true, mobileEmulationEnabled=false, version=46.0.2490.80, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, hasTouchScreen=false, applicationCacheEnabled=false, takesScreenshot=true}]"
                        ]
                      ]
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                      "java.lang.Thread.run(Thread.java:745)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "a030f0cb-f465-4b70-bde2-100c2f7b99da"
                  },
                  "parametrisedStep": "Then the user should be added",
                  "durationInMillis": 194
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "scenario description",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the person list is opened",
                "When I make a new test user",
                "Then the user should be added"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "FAILED"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 13013
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/OverigeTests.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "form test aanmelding client, pick a date",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I pick a date",
              "Then the date should be displayed"
            ]
          }
        ],
        "name": "OverigeTests.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "form test aanmelding client, pick a date",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I pick a date",
              "Then the date should be displayed"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/OverigeTests.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "WHEN",
                  "annotatedPattern": "I pick a date",
                  "resolvedPattern": "I\\s+pick\\s+a\\s+date"
                },
                {
                  "type": "THEN",
                  "annotatedPattern": "the date should be displayed",
                  "resolvedPattern": "the\\s+date\\s+should\\s+be\\s+displayed"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the aanmelding client form is opened",
                  "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given the aanmelding client form is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the aanmelding client form is opened",
                  "durationInMillis": 11061
                },
                {
                  "step": "When I pick a date",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I pick a date",
                  "durationInMillis": 120
                },
                {
                  "step": "Then the date should be displayed",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then the date should be displayed",
                  "durationInMillis": 16
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "form test aanmelding client, pick a date",
              "meta": {
                "properties": [
                  {
                    "@name": "id1",
                    "@value": "scenario1"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the aanmelding client form is opened",
                "When I pick a date",
                "Then the date should be displayed"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 11201
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/aanmakenZiektenbeeld.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "an explenation field should be displayed when a ziektenbeeld is added",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the anamnese form is opened",
              "When I click on each ziektenbeeld",
              "Then each ziektenbeeld should display an explenation field"
            ]
          }
        ],
        "name": "aanmakenZiektenbeeld.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "an explenation field should be displayed when a ziektenbeeld is added",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the anamnese form is opened",
              "When I click on each ziektenbeeld",
              "Then each ziektenbeeld should display an explenation field"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/aanmakenZiektenbeeld.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "THEN",
                  "annotatedPattern": "each ziektenbeeld should display an explenation field",
                  "resolvedPattern": "each\\s+ziektenbeeld\\s+should\\s+display\\s+an\\s+explenation\\s+field"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the anamnese form is opened",
                  "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I click on each ziektenbeeld",
                  "resolvedPattern": "I\\s+click\\s+on\\s+each\\s+ziektenbeeld"
                }
              ],
              "results": [
                {
                  "step": "Given the anamnese form is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the anamnese form is opened",
                  "durationInMillis": 15610
                },
                {
                  "step": "When I click on each ziektenbeeld",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I click on each ziektenbeeld",
                  "durationInMillis": 12611
                },
                {
                  "step": "Then each ziektenbeeld should display an explenation field",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then each ziektenbeeld should display an explenation field",
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "an explenation field should be displayed when a ziektenbeeld is added",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the anamnese form is opened",
                "When I click on each ziektenbeeld",
                "Then each ziektenbeeld should display an explenation field"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 28223
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/adresgegevensOphalen.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "when the zipcode and housenumber are entered the street and city should be automaticly filled in",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter a valid postcode and huisnummer",
              "Then the straat and plaats should correctly be generated"
            ]
          }
        ],
        "name": "adresgegevensOphalen.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "when the zipcode and housenumber are entered the street and city should be automaticly filled in",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter a valid postcode and huisnummer",
              "Then the straat and plaats should correctly be generated"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/adresgegevensOphalen.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter a valid postcode and huisnummer",
                  "resolvedPattern": "I\\s+enter\\s+a\\s+valid\\s+postcode\\s+and\\s+huisnummer"
                },
                {
                  "type": "THEN",
                  "annotatedPattern": "the straat and plaats should correctly be generated",
                  "resolvedPattern": "the\\s+straat\\s+and\\s+plaats\\s+should\\s+correctly\\s+be\\s+generated"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the aanmelding client form is opened",
                  "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given the aanmelding client form is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the aanmelding client form is opened",
                  "durationInMillis": 0
                },
                {
                  "step": "When I enter a valid postcode and huisnummer",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter a valid postcode and huisnummer",
                  "durationInMillis": 5216
                },
                {
                  "step": "Then the straat and plaats should correctly be generated",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then the straat and plaats should correctly be generated",
                  "durationInMillis": 611
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "when the zipcode and housenumber are entered the street and city should be automaticly filled in",
              "meta": {
                "properties": [
                  {
                    "@name": "id1",
                    "@value": "scenario1"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the aanmelding client form is opened",
                "When I enter a valid postcode and huisnummer",
                "Then the straat and plaats should correctly be generated"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 5831
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/bsnValidation.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "form test aanmelding client, valid BSN check",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter a valid BSN",
              "Then the BSN should be accepted"
            ]
          },
          {
            "title": "form test aanmelding client, invalid BSN check",
            "meta": {
              "properties": [
                {
                  "@name": "id2",
                  "@value": "scenario2"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter an invalid BSN",
              "Then the BSN should be rejected"
            ]
          },
          {
            "title": "form test aanmelding client, already used BSN check",
            "meta": {
              "properties": [
                {
                  "@name": "id3",
                  "@value": "scenario3"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter a used BSN",
              "Then the BSN should be rejected"
            ]
          }
        ],
        "name": "bsnValidation.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "FAILED",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "form test aanmelding client, valid BSN check",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter a valid BSN",
              "Then the BSN should be accepted"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/bsnValidation.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter a valid BSN",
                  "resolvedPattern": "I\\s+enter\\s+a\\s+valid\\s+BSN"
                },
                {
                  "type": "THEN",
                  "annotatedPattern": "the BSN should be accepted",
                  "resolvedPattern": "the\\s+BSN\\s+should\\s+be\\s+accepted"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the aanmelding client form is opened",
                  "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given the aanmelding client form is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the aanmelding client form is opened",
                  "durationInMillis": 10478
                },
                {
                  "step": "When I enter a valid BSN",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter a valid BSN",
                  "durationInMillis": 356
                },
                {
                  "step": "Then the BSN should be accepted",
                  "type": "FAILED",
                  "throwable": {
                    "detailMessage": "Then the BSN should be accepted",
                    "cause": {
                      "@class": "org.junit.ComparisonFailure",
                      "detailMessage": "",
                      "stackTrace": [
                        "org.junit.Assert.assertEquals(Assert.java:115)",
                        "org.junit.Assert.assertEquals(Assert.java:144)",
                        "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkBSNAccepted(AanmeldingClientSteps.java:86)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                        "java.lang.reflect.Method.invoke(Method.java:606)",
                        "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                        "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                        "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                        "java.lang.Thread.run(Thread.java:745)"
                      ],
                      "suppressedExceptions": [
                        [],
                        []
                      ],
                      "fExpected": "icon-ok",
                      "fActual": "icon-warning-sign"
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                      "java.lang.Thread.run(Thread.java:745)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "3b65617a-cbb2-469d-b321-b9638ed6b058"
                  },
                  "parametrisedStep": "Then the BSN should be accepted",
                  "durationInMillis": 20476
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "form test aanmelding client, valid BSN check",
              "meta": {
                "properties": [
                  {
                    "@name": "id1",
                    "@value": "scenario1"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the aanmelding client form is opened",
                "When I enter a valid BSN",
                "Then the BSN should be accepted"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "FAILED"
        },
        {
          "scenario": {
            "title": "form test aanmelding client, invalid BSN check",
            "meta": {
              "properties": [
                {
                  "@name": "id2",
                  "@value": "scenario2"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter an invalid BSN",
              "Then the BSN should be rejected"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/bsnValidation.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "THEN",
                  "annotatedPattern": "the BSN should be rejected",
                  "resolvedPattern": "the\\s+BSN\\s+should\\s+be\\s+rejected"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter an invalid BSN",
                  "resolvedPattern": "I\\s+enter\\s+an\\s+invalid\\s+BSN"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the aanmelding client form is opened",
                  "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given the aanmelding client form is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the aanmelding client form is opened",
                  "durationInMillis": 0
                },
                {
                  "step": "When I enter an invalid BSN",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter an invalid BSN",
                  "durationInMillis": 194
                },
                {
                  "step": "Then the BSN should be rejected",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then the BSN should be rejected",
                  "durationInMillis": 541
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "form test aanmelding client, invalid BSN check",
              "meta": {
                "properties": [
                  {
                    "@name": "id2",
                    "@value": "scenario2"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the aanmelding client form is opened",
                "When I enter an invalid BSN",
                "Then the BSN should be rejected"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "NOT_PERFORMED"
        },
        {
          "scenario": {
            "title": "form test aanmelding client, already used BSN check",
            "meta": {
              "properties": [
                {
                  "@name": "id3",
                  "@value": "scenario3"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I enter a used BSN",
              "Then the BSN should be rejected"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/bsnValidation.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "THEN",
                  "annotatedPattern": "the BSN should be rejected",
                  "resolvedPattern": "the\\s+BSN\\s+should\\s+be\\s+rejected"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter a used BSN",
                  "resolvedPattern": "I\\s+enter\\s+a\\s+used\\s+BSN"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "the aanmelding client form is opened",
                  "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                }
              ],
              "results": [
                {
                  "step": "Given the aanmelding client form is opened",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given the aanmelding client form is opened",
                  "durationInMillis": 0
                },
                {
                  "step": "When I enter a used BSN",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter a used BSN",
                  "durationInMillis": 126
                },
                {
                  "step": "Then the BSN should be rejected",
                  "type": "FAILED",
                  "throwable": {
                    "detailMessage": "Then the BSN should be rejected",
                    "cause": {
                      "@class": "org.junit.ComparisonFailure",
                      "detailMessage": "",
                      "stackTrace": [
                        "org.junit.Assert.assertEquals(Assert.java:115)",
                        "org.junit.Assert.assertEquals(Assert.java:144)",
                        "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkBSNRejected(AanmeldingClientSteps.java:75)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                        "java.lang.reflect.Method.invoke(Method.java:606)",
                        "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                        "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                        "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                        "java.lang.Thread.run(Thread.java:745)"
                      ],
                      "suppressedExceptions": [
                        [],
                        []
                      ],
                      "fExpected": "icon-remove",
                      "fActual": "icon-warning-sign"
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                      "java.lang.Thread.run(Thread.java:745)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "6a957ff1-6755-483f-9bdd-14a2990016db"
                  },
                  "parametrisedStep": "Then the BSN should be rejected",
                  "durationInMillis": 10731
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "form test aanmelding client, already used BSN check",
              "meta": {
                "properties": [
                  {
                    "@name": "id3",
                    "@value": "scenario3"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given the aanmelding client form is opened",
                "When I enter a used BSN",
                "Then the BSN should be rejected"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "FAILED"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 42917
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/frontendLogin.story",
        "description": {
          "descriptionAsString": "Story: Frontend Login"
        },
        "narrative": {
          "inOrderTo": "access the workflow4people frontend",
          "asA": "demo user",
          "iWantTo": "login into the application",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "A workflo4people frontend login attempt with both invalid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people frontend is started",
              "When I enter invalid frontend credentials",
              "And I log in to the frontend",
              "Then I should not be logged in to the frontend"
            ]
          },
          {
            "title": "A workflo4people frontend login attempt with both valid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id2",
                  "@value": "scenario2"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people frontend is started",
              "When I enter valid frontend credentials",
              "And I log in to the frontend",
              "Then I should be logged in to the frontend"
            ]
          }
        ],
        "name": "frontendLogin.story"
      },
      "localizedNarrative": "In order to access the workflow4people frontend\nAs a demo user\nI want to login into the application",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "A workflo4people frontend login attempt with both invalid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people frontend is started",
              "When I enter invalid frontend credentials",
              "And I log in to the frontend",
              "Then I should not be logged in to the frontend"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/frontendLogin.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter invalid frontend credentials",
                  "resolvedPattern": "I\\s+enter\\s+invalid\\s+frontend\\s+credentials"
                },
                {
                  "type": "THEN",
                  "annotatedPattern": "I should not be logged in to the frontend",
                  "resolvedPattern": "I\\s+should\\s+not\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+frontend"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I log in to the frontend",
                  "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+frontend"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "The workflow4people frontend is started",
                  "resolvedPattern": "The\\s+workflow4people\\s+frontend\\s+is\\s+started"
                }
              ],
              "results": [
                {
                  "step": "Given The workflow4people frontend is started",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given The workflow4people frontend is started",
                  "durationInMillis": 2460
                },
                {
                  "step": "When I enter invalid frontend credentials",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter invalid frontend credentials",
                  "durationInMillis": 236
                },
                {
                  "step": "And I log in to the frontend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "And I log in to the frontend",
                  "durationInMillis": 5671
                },
                {
                  "step": "Then I should not be logged in to the frontend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then I should not be logged in to the frontend",
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "A workflo4people frontend login attempt with both invalid credentials",
              "meta": {
                "properties": [
                  {
                    "@name": "id1",
                    "@value": "scenario1"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given The workflow4people frontend is started",
                "When I enter invalid frontend credentials",
                "And I log in to the frontend",
                "Then I should not be logged in to the frontend"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        },
        {
          "scenario": {
            "title": "A workflo4people frontend login attempt with both valid credentials",
            "meta": {
              "properties": [
                {
                  "@name": "id2",
                  "@value": "scenario2"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given The workflow4people frontend is started",
              "When I enter valid frontend credentials",
              "And I log in to the frontend",
              "Then I should be logged in to the frontend"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/frontendLogin.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [
                {
                  "type": "THEN",
                  "annotatedPattern": "I should be logged in to the frontend",
                  "resolvedPattern": "I\\s+should\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+frontend"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I enter valid frontend credentials",
                  "resolvedPattern": "I\\s+enter\\s+valid\\s+frontend\\s+credentials"
                },
                {
                  "type": "WHEN",
                  "annotatedPattern": "I log in to the frontend",
                  "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+frontend"
                },
                {
                  "type": "GIVEN",
                  "annotatedPattern": "The workflow4people frontend is started",
                  "resolvedPattern": "The\\s+workflow4people\\s+frontend\\s+is\\s+started"
                }
              ],
              "results": [
                {
                  "step": "Given The workflow4people frontend is started",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given The workflow4people frontend is started",
                  "durationInMillis": 0
                },
                {
                  "step": "When I enter valid frontend credentials",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I enter valid frontend credentials",
                  "durationInMillis": 484
                },
                {
                  "step": "And I log in to the frontend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "And I log in to the frontend",
                  "durationInMillis": 807
                },
                {
                  "step": "Then I should be logged in to the frontend",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Then I should be logged in to the frontend",
                  "durationInMillis": 558
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "scenario": {
              "title": "A workflo4people frontend login attempt with both valid credentials",
              "meta": {
                "properties": [
                  {
                    "@name": "id2",
                    "@value": "scenario2"
                  }
                ]
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FORMATTING",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given The workflow4people frontend is started",
                "When I enter valid frontend credentials",
                "And I log in to the frontend",
                "Then I should be logged in to the frontend"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 10220
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/inladenKeuzemogelijkheden.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "form test aanmelding client, expand aanhef list",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|list|value1|value2|\n|aanhef|Heer|Mevrouw|\n|geslacht|Mannelijk|Vrouwelijk|\n|burgerlijke staat|Gehuwd|Gescheiden|\n|type relatie|Zoon|Dochter|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [
                "list",
                "value1",
                "value2"
              ],
              "data": [
                [
                  [
                    "list",
                    "aanhef"
                  ],
                  [
                    "value1",
                    "Heer"
                  ],
                  [
                    "value2",
                    "Mevrouw"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ],
                [
                  [
                    "list",
                    "geslacht"
                  ],
                  [
                    "value1",
                    "Mannelijk"
                  ],
                  [
                    "value2",
                    "Vrouwelijk"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ],
                [
                  [
                    "list",
                    "burgerlijke staat"
                  ],
                  [
                    "value1",
                    "Gehuwd"
                  ],
                  [
                    "value2",
                    "Gescheiden"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ],
                [
                  [
                    "list",
                    "type relatie"
                  ],
                  [
                    "value1",
                    "Zoon"
                  ],
                  [
                    "value2",
                    "Dochter"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I expand the <list> list",
              "Then the list should be filled with at least <value1> and <value2>"
            ]
          }
        ],
        "name": "inladenKeuzemogelijkheden.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "FAILED",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "form test aanmelding client, expand aanhef list",
            "meta": {
              "properties": [
                {
                  "@name": "id1",
                  "@value": "scenario1"
                }
              ]
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|list|value1|value2|\n|aanhef|Heer|Mevrouw|\n|geslacht|Mannelijk|Vrouwelijk|\n|burgerlijke staat|Gehuwd|Gescheiden|\n|type relatie|Zoon|Dochter|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [
                "list",
                "value1",
                "value2"
              ],
              "data": [
                [
                  [
                    "list",
                    "aanhef"
                  ],
                  [
                    "value1",
                    "Heer"
                  ],
                  [
                    "value2",
                    "Mevrouw"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ],
                [
                  [
                    "list",
                    "geslacht"
                  ],
                  [
                    "value1",
                    "Mannelijk"
                  ],
                  [
                    "value2",
                    "Vrouwelijk"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ],
                [
                  [
                    "list",
                    "burgerlijke staat"
                  ],
                  [
                    "value1",
                    "Gehuwd"
                  ],
                  [
                    "value2",
                    "Gescheiden"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ],
                [
                  [
                    "list",
                    "type relatie"
                  ],
                  [
                    "value1",
                    "Zoon"
                  ],
                  [
                    "value2",
                    "Dochter"
                  ],
                  [
                    "id1",
                    "scenario1"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the aanmelding client form is opened",
              "When I expand the <list> list",
              "Then the list should be filled with at least <value1> and <value2>"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/inladenKeuzemogelijkheden.story",
          "allowed": true,
          "examplePerformableScenarios": [
            {
              "parameters": [
                [
                  "list",
                  "aanhef"
                ],
                [
                  "value1",
                  "Heer"
                ],
                [
                  "value2",
                  "Mevrouw"
                ],
                [
                  "id1",
                  "scenario1"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                    "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I expand the <list> list",
                    "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the aanmelding client form is opened",
                    "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                  }
                ],
                "results": [
                  {
                    "step": "Given the aanmelding client form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the aanmelding client form is opened",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When I expand the <list> list",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I expand the ｟aanhef｠ list",
                    "durationInMillis": 221
                  },
                  {
                    "step": "Then the list should be filled with at least <value1> and <value2>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the list should be filled with at least ｟Heer｠ and ｟Mevrouw｠",
                    "durationInMillis": 455
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            },
            {
              "parameters": [
                [
                  "list",
                  "geslacht"
                ],
                [
                  "value1",
                  "Mannelijk"
                ],
                [
                  "value2",
                  "Vrouwelijk"
                ],
                [
                  "id1",
                  "scenario1"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                    "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I expand the <list> list",
                    "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the aanmelding client form is opened",
                    "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                  }
                ],
                "results": [
                  {
                    "step": "Given the aanmelding client form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the aanmelding client form is opened",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When I expand the <list> list",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I expand the ｟geslacht｠ list",
                    "durationInMillis": 199
                  },
                  {
                    "step": "Then the list should be filled with at least <value1> and <value2>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the list should be filled with at least ｟Mannelijk｠ and ｟Vrouwelijk｠",
                    "durationInMillis": 372
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            },
            {
              "parameters": [
                [
                  "list",
                  "burgerlijke staat"
                ],
                [
                  "value1",
                  "Gehuwd"
                ],
                [
                  "value2",
                  "Gescheiden"
                ],
                [
                  "id1",
                  "scenario1"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                    "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I expand the <list> list",
                    "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the aanmelding client form is opened",
                    "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                  }
                ],
                "results": [
                  {
                    "step": "Given the aanmelding client form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the aanmelding client form is opened",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When I expand the <list> list",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I expand the ｟burgerlijke staat｠ list",
                    "durationInMillis": 179
                  },
                  {
                    "step": "Then the list should be filled with at least <value1> and <value2>",
                    "type": "FAILED",
                    "throwable": {
                      "detailMessage": "Then the list should be filled with at least <value1> and <value2>",
                      "cause": {
                        "@class": "java.lang.AssertionError",
                        "detailMessage": "expected:<true> but was:<false>",
                        "stackTrace": [
                          "org.junit.Assert.fail(Assert.java:88)",
                          "org.junit.Assert.failNotEquals(Assert.java:743)",
                          "org.junit.Assert.assertEquals(Assert.java:118)",
                          "org.junit.Assert.assertEquals(Assert.java:144)",
                          "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:91)",
                          "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                          "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                          "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                          "java.lang.reflect.Method.invoke(Method.java:606)",
                          "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                          "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                          "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                          "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                          "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                          "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                          "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                          "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                          "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                          "java.lang.Thread.run(Thread.java:745)"
                        ],
                        "suppressedExceptions": [
                          [],
                          []
                        ]
                      },
                      "stackTrace": [
                        "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                        "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                        "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                        "java.lang.Thread.run(Thread.java:745)"
                      ],
                      "suppressedExceptions": [
                        [],
                        []
                      ],
                      "uuid": "0a7be09f-c4c7-40dc-bc74-018debab3b27"
                    },
                    "parametrisedStep": "Then the list should be filled with at least ｟Gehuwd｠ and ｟Gescheiden｠",
                    "durationInMillis": 265
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            },
            {
              "parameters": [
                [
                  "list",
                  "type relatie"
                ],
                [
                  "value1",
                  "Zoon"
                ],
                [
                  "value2",
                  "Dochter"
                ],
                [
                  "id1",
                  "scenario1"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                    "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I expand the <list> list",
                    "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the aanmelding client form is opened",
                    "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
                  }
                ],
                "results": [
                  {
                    "step": "Given the aanmelding client form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the aanmelding client form is opened",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When I expand the <list> list",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I expand the ｟type relatie｠ list",
                    "durationInMillis": 166
                  },
                  {
                    "step": "Then the list should be filled with at least <value1> and <value2>",
                    "type": "FAILED",
                    "throwable": {
                      "detailMessage": "Then the list should be filled with at least <value1> and <value2>",
                      "cause": {
                        "@class": "java.lang.AssertionError",
                        "detailMessage": "expected:<true> but was:<false>",
                        "stackTrace": [
                          "org.junit.Assert.fail(Assert.java:88)",
                          "org.junit.Assert.failNotEquals(Assert.java:743)",
                          "org.junit.Assert.assertEquals(Assert.java:118)",
                          "org.junit.Assert.assertEquals(Assert.java:144)",
                          "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:91)",
                          "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                          "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                          "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                          "java.lang.reflect.Method.invoke(Method.java:606)",
                          "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                          "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                          "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                          "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                          "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                          "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                          "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                          "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                          "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                          "java.lang.Thread.run(Thread.java:745)"
                        ],
                        "suppressedExceptions": [
                          [],
                          []
                        ]
                      },
                      "stackTrace": [
                        "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                        "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                        "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                        "java.lang.Thread.run(Thread.java:745)"
                      ],
                      "suppressedExceptions": [
                        [],
                        []
                      ],
                      "uuid": "6277fae3-8c4b-44ce-b8dd-c1c169aca3a7"
                    },
                    "parametrisedStep": "Then the list should be filled with at least ｟Zoon｠ and ｟Dochter｠",
                    "durationInMillis": 309
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            }
          ],
          "status": "FAILED"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 2199
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "com/test/jbehave/stories/frontend/ophalenClientgegevens.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "Checks if client information is correctly searchable",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|searchtype|\n|Achternaam|\n|BSN|\n|Clientnummer|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [
                "searchtype"
              ],
              "data": [
                [
                  [
                    "searchtype",
                    "Achternaam"
                  ]
                ],
                [
                  [
                    "searchtype",
                    "BSN"
                  ]
                ],
                [
                  [
                    "searchtype",
                    "Clientnummer"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the anamnese form is opened",
              "When I search for a client based on <searchtype>",
              "Then the correct client should be displayed"
            ]
          }
        ],
        "name": "ophalenClientgegevens.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "SUCCESSFUL",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "Checks if client information is correctly searchable",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FORMATTING",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|searchtype|\n|Achternaam|\n|BSN|\n|Clientnummer|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [
                "searchtype"
              ],
              "data": [
                [
                  [
                    "searchtype",
                    "Achternaam"
                  ]
                ],
                [
                  [
                    "searchtype",
                    "BSN"
                  ]
                ],
                [
                  [
                    "searchtype",
                    "Clientnummer"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given the anamnese form is opened",
              "When I search for a client based on <searchtype>",
              "Then the correct client should be displayed"
            ]
          },
          "storyPath": "com/test/jbehave/stories/frontend/ophalenClientgegevens.story",
          "allowed": true,
          "examplePerformableScenarios": [
            {
              "parameters": [
                [
                  "searchtype",
                  "Achternaam"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the anamnese form is opened",
                    "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the correct client should be displayed",
                    "resolvedPattern": "the\\s+correct\\s+client\\s+should\\s+be\\s+displayed"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I search for a client based on <searchtype>",
                    "resolvedPattern": "I\\s+search\\s+for\\s+a\\s+client\\s+based\\s+on\\s+<searchtype>"
                  }
                ],
                "results": [
                  {
                    "step": "Given the anamnese form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the anamnese form is opened",
                    "durationInMillis": 2442
                  },
                  {
                    "step": "When I search for a client based on <searchtype>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I search for a client based on ｟Achternaam｠",
                    "durationInMillis": 382
                  },
                  {
                    "step": "Then the correct client should be displayed",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the correct client should be displayed",
                    "durationInMillis": 15126
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            },
            {
              "parameters": [
                [
                  "searchtype",
                  "BSN"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the anamnese form is opened",
                    "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the correct client should be displayed",
                    "resolvedPattern": "the\\s+correct\\s+client\\s+should\\s+be\\s+displayed"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I search for a client based on <searchtype>",
                    "resolvedPattern": "I\\s+search\\s+for\\s+a\\s+client\\s+based\\s+on\\s+<searchtype>"
                  }
                ],
                "results": [
                  {
                    "step": "Given the anamnese form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the anamnese form is opened",
                    "durationInMillis": 2410
                  },
                  {
                    "step": "When I search for a client based on <searchtype>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I search for a client based on ｟BSN｠",
                    "durationInMillis": 329
                  },
                  {
                    "step": "Then the correct client should be displayed",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the correct client should be displayed",
                    "durationInMillis": 7409
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            },
            {
              "parameters": [
                [
                  "searchtype",
                  "Clientnummer"
                ]
              ],
              "givenStories": [],
              "beforeSteps": {
                "matches": []
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the anamnese form is opened",
                    "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the correct client should be displayed",
                    "resolvedPattern": "the\\s+correct\\s+client\\s+should\\s+be\\s+displayed"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I search for a client based on <searchtype>",
                    "resolvedPattern": "I\\s+search\\s+for\\s+a\\s+client\\s+based\\s+on\\s+<searchtype>"
                  }
                ],
                "results": [
                  {
                    "step": "Given the anamnese form is opened",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the anamnese form is opened",
                    "durationInMillis": 2338
                  },
                  {
                    "step": "When I search for a client based on <searchtype>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I search for a client based on ｟Clientnummer｠",
                    "durationInMillis": 316
                  },
                  {
                    "step": "Then the correct client should be displayed",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the correct client should be displayed",
                    "durationInMillis": 3716
                  }
                ]
              },
              "afterSteps": {
                "matches": []
              }
            }
          ],
          "status": "SUCCESSFUL"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 34482
      },
      "givenStory": false
    }
  ],
  "scenarios": [
    {
      "scenario": {
        "title": "scenario description",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given a google page is opened",
          "When I execute a javascript",
          "Then the script should be executed"
        ]
      },
      "storyPath": "com/test/jbehave/stories/Javascript/javascriptTest.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "WHEN",
              "annotatedPattern": "I execute a javascript",
              "resolvedPattern": "I\\s+execute\\s+a\\s+javascript"
            },
            {
              "type": "THEN",
              "annotatedPattern": "the script should be executed",
              "resolvedPattern": "the\\s+script\\s+should\\s+be\\s+executed"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "a google page is opened",
              "resolvedPattern": "a\\s+google\\s+page\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given a google page is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given a google page is opened",
              "durationInMillis": 4402
            },
            {
              "step": "When I execute a javascript",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I execute a javascript",
              "durationInMillis": 59
            },
            {
              "step": "Then the script should be executed",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then the script should be executed",
              "durationInMillis": 5560
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "scenario description",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given a google page is opened",
            "When I execute a javascript",
            "Then the script should be executed"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "A workflo4people backend login attempt with invalid credentials",
        "meta": {
          "properties": [
            {
              "@name": "id1",
              "@value": "scenario1"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given The workflow4people backend is started",
          "When I enter invalid backend credentials",
          "And I log in to the backend",
          "Then I should not be logged in to the backend"
        ]
      },
      "storyPath": "com/test/jbehave/stories/backend/backendLogin.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "THEN",
              "annotatedPattern": "I should not be logged in to the backend",
              "resolvedPattern": "I\\s+should\\s+not\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+backend"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "The workflow4people backend is started",
              "resolvedPattern": "The\\s+workflow4people\\s+backend\\s+is\\s+started"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I enter invalid backend credentials",
              "resolvedPattern": "I\\s+enter\\s+invalid\\s+backend\\s+credentials"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I log in to the backend",
              "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+backend"
            }
          ],
          "results": [
            {
              "step": "Given The workflow4people backend is started",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given The workflow4people backend is started",
              "durationInMillis": 4722
            },
            {
              "step": "When I enter invalid backend credentials",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter invalid backend credentials",
              "durationInMillis": 228
            },
            {
              "step": "And I log in to the backend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "And I log in to the backend",
              "durationInMillis": 5650
            },
            {
              "step": "Then I should not be logged in to the backend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then I should not be logged in to the backend",
              "durationInMillis": 558
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "A workflo4people backend login attempt with invalid credentials",
          "meta": {
            "properties": [
              {
                "@name": "id1",
                "@value": "scenario1"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given The workflow4people backend is started",
            "When I enter invalid backend credentials",
            "And I log in to the backend",
            "Then I should not be logged in to the backend"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "A workflo4people backend login attempt with valid credentials",
        "meta": {
          "properties": [
            {
              "@name": "id2",
              "@value": "scenario2"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given The workflow4people backend is started",
          "When I enter valid backend credentials",
          "And I log in to the backend",
          "Then I should be logged in to the backend"
        ]
      },
      "storyPath": "com/test/jbehave/stories/backend/backendLogin.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "WHEN",
              "annotatedPattern": "I enter valid backend credentials",
              "resolvedPattern": "I\\s+enter\\s+valid\\s+backend\\s+credentials"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "The workflow4people backend is started",
              "resolvedPattern": "The\\s+workflow4people\\s+backend\\s+is\\s+started"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I log in to the backend",
              "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+backend"
            },
            {
              "type": "THEN",
              "annotatedPattern": "I should be logged in to the backend",
              "resolvedPattern": "I\\s+should\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+backend"
            }
          ],
          "results": [
            {
              "step": "Given The workflow4people backend is started",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given The workflow4people backend is started",
              "durationInMillis": 2716
            },
            {
              "step": "When I enter valid backend credentials",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter valid backend credentials",
              "durationInMillis": 251
            },
            {
              "step": "And I log in to the backend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "And I log in to the backend",
              "durationInMillis": 3596
            },
            {
              "step": "Then I should be logged in to the backend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then I should be logged in to the backend",
              "durationInMillis": 556
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "A workflo4people backend login attempt with valid credentials",
          "meta": {
            "properties": [
              {
                "@name": "id2",
                "@value": "scenario2"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given The workflow4people backend is started",
            "When I enter valid backend credentials",
            "And I log in to the backend",
            "Then I should be logged in to the backend"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "scenario description",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the person list is opened",
          "When I make a new test user",
          "Then the user should be added"
        ]
      },
      "storyPath": "com/test/jbehave/stories/backend/makeUser.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "THEN",
              "annotatedPattern": "the user should be added",
              "resolvedPattern": "the\\s+user\\s+should\\s+be\\s+added"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I make a new test user",
              "resolvedPattern": "I\\s+make\\s+a\\s+new\\s+test\\s+user"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the person list is opened",
              "resolvedPattern": "the\\s+person\\s+list\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given the person list is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the person list is opened",
              "durationInMillis": 9953
            },
            {
              "step": "When I make a new test user",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I make a new test user",
              "durationInMillis": 2847
            },
            {
              "step": "Then the user should be added",
              "type": "FAILED",
              "throwable": {
                "detailMessage": "Then the user should be added",
                "cause": {
                  "@class": "org.openqa.selenium.WebDriverException",
                  "detailMessage": "unknown error: Element is not clickable at point (44, 189). Other element would receive the click: <div class=\"ui-widget-overlay\" style=\"width: 1025px; height: 744px; z-index: 1001;\"></div>\n  (Session info: chrome=46.0.2490.80)\n  (Driver info: chromedriver=2.20.353141 (da3cb4b52d3a04ce079546eac4dc96182f58602b),platform=Linux 3.13.0-66-generic x86) (WARNING: The server did not provide any stacktrace information)\nCommand duration or timeout: 68 milliseconds",
                  "stackTrace": [
                    "sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
                    "sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)",
                    "sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)",
                    "java.lang.reflect.Constructor.newInstance(Constructor.java:526)",
                    "org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:206)",
                    "org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:158)",
                    "org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:647)",
                    "org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:326)",
                    "org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:84)",
                    "com.test.jbehave.pages.UserPage.checkUserWasAdded(UserPage.java:89)",
                    "com.test.jbehave.steps.backend.MakeUserSteps.validateUser(MakeUserSteps.java:45)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                    "java.lang.reflect.Method.invoke(Method.java:606)",
                    "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                    "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                    "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                    "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                    "java.lang.Thread.run(Thread.java:745)"
                  ],
                  "suppressedExceptions": [
                    [],
                    []
                  ],
                  "extraInfo": [
                    [
                      "Session ID",
                      "896ceb13b5349f8636dc090021b197a1"
                    ],
                    [
                      "Driver info",
                      "org.openqa.selenium.chrome.ChromeDriver"
                    ],
                    [
                      "Capabilities",
                      "Capabilities [{platform=LINUX, acceptSslCerts=true, javascriptEnabled=true, browserName=chrome, chrome={userDataDir=/tmp/.com.google.Chrome.naQNHZ}, rotatable=false, locationContextEnabled=true, mobileEmulationEnabled=false, version=46.0.2490.80, takesHeapSnapshot=true, cssSelectorsEnabled=true, databaseEnabled=false, handlesAlerts=true, browserConnectionEnabled=false, webStorageEnabled=true, nativeEvents=true, hasTouchScreen=false, applicationCacheEnabled=false, takesScreenshot=true}]"
                    ]
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                  "java.lang.Thread.run(Thread.java:745)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "a030f0cb-f465-4b70-bde2-100c2f7b99da"
              },
              "parametrisedStep": "Then the user should be added",
              "durationInMillis": 194
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "scenario description",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the person list is opened",
            "When I make a new test user",
            "Then the user should be added"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "FAILED"
    },
    {
      "scenario": {
        "title": "form test aanmelding client, pick a date",
        "meta": {
          "properties": [
            {
              "@name": "id1",
              "@value": "scenario1"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the aanmelding client form is opened",
          "When I pick a date",
          "Then the date should be displayed"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/OverigeTests.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "WHEN",
              "annotatedPattern": "I pick a date",
              "resolvedPattern": "I\\s+pick\\s+a\\s+date"
            },
            {
              "type": "THEN",
              "annotatedPattern": "the date should be displayed",
              "resolvedPattern": "the\\s+date\\s+should\\s+be\\s+displayed"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the aanmelding client form is opened",
              "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given the aanmelding client form is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the aanmelding client form is opened",
              "durationInMillis": 11061
            },
            {
              "step": "When I pick a date",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I pick a date",
              "durationInMillis": 120
            },
            {
              "step": "Then the date should be displayed",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then the date should be displayed",
              "durationInMillis": 16
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "form test aanmelding client, pick a date",
          "meta": {
            "properties": [
              {
                "@name": "id1",
                "@value": "scenario1"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the aanmelding client form is opened",
            "When I pick a date",
            "Then the date should be displayed"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "an explenation field should be displayed when a ziektenbeeld is added",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the anamnese form is opened",
          "When I click on each ziektenbeeld",
          "Then each ziektenbeeld should display an explenation field"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/aanmakenZiektenbeeld.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "THEN",
              "annotatedPattern": "each ziektenbeeld should display an explenation field",
              "resolvedPattern": "each\\s+ziektenbeeld\\s+should\\s+display\\s+an\\s+explenation\\s+field"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the anamnese form is opened",
              "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I click on each ziektenbeeld",
              "resolvedPattern": "I\\s+click\\s+on\\s+each\\s+ziektenbeeld"
            }
          ],
          "results": [
            {
              "step": "Given the anamnese form is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the anamnese form is opened",
              "durationInMillis": 15610
            },
            {
              "step": "When I click on each ziektenbeeld",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I click on each ziektenbeeld",
              "durationInMillis": 12611
            },
            {
              "step": "Then each ziektenbeeld should display an explenation field",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then each ziektenbeeld should display an explenation field",
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "an explenation field should be displayed when a ziektenbeeld is added",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the anamnese form is opened",
            "When I click on each ziektenbeeld",
            "Then each ziektenbeeld should display an explenation field"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "when the zipcode and housenumber are entered the street and city should be automaticly filled in",
        "meta": {
          "properties": [
            {
              "@name": "id1",
              "@value": "scenario1"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the aanmelding client form is opened",
          "When I enter a valid postcode and huisnummer",
          "Then the straat and plaats should correctly be generated"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/adresgegevensOphalen.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "WHEN",
              "annotatedPattern": "I enter a valid postcode and huisnummer",
              "resolvedPattern": "I\\s+enter\\s+a\\s+valid\\s+postcode\\s+and\\s+huisnummer"
            },
            {
              "type": "THEN",
              "annotatedPattern": "the straat and plaats should correctly be generated",
              "resolvedPattern": "the\\s+straat\\s+and\\s+plaats\\s+should\\s+correctly\\s+be\\s+generated"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the aanmelding client form is opened",
              "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given the aanmelding client form is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the aanmelding client form is opened",
              "durationInMillis": 0
            },
            {
              "step": "When I enter a valid postcode and huisnummer",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter a valid postcode and huisnummer",
              "durationInMillis": 5216
            },
            {
              "step": "Then the straat and plaats should correctly be generated",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then the straat and plaats should correctly be generated",
              "durationInMillis": 611
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "when the zipcode and housenumber are entered the street and city should be automaticly filled in",
          "meta": {
            "properties": [
              {
                "@name": "id1",
                "@value": "scenario1"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the aanmelding client form is opened",
            "When I enter a valid postcode and huisnummer",
            "Then the straat and plaats should correctly be generated"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "form test aanmelding client, valid BSN check",
        "meta": {
          "properties": [
            {
              "@name": "id1",
              "@value": "scenario1"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the aanmelding client form is opened",
          "When I enter a valid BSN",
          "Then the BSN should be accepted"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/bsnValidation.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "WHEN",
              "annotatedPattern": "I enter a valid BSN",
              "resolvedPattern": "I\\s+enter\\s+a\\s+valid\\s+BSN"
            },
            {
              "type": "THEN",
              "annotatedPattern": "the BSN should be accepted",
              "resolvedPattern": "the\\s+BSN\\s+should\\s+be\\s+accepted"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the aanmelding client form is opened",
              "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given the aanmelding client form is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the aanmelding client form is opened",
              "durationInMillis": 10478
            },
            {
              "step": "When I enter a valid BSN",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter a valid BSN",
              "durationInMillis": 356
            },
            {
              "step": "Then the BSN should be accepted",
              "type": "FAILED",
              "throwable": {
                "detailMessage": "Then the BSN should be accepted",
                "cause": {
                  "@class": "org.junit.ComparisonFailure",
                  "detailMessage": "",
                  "stackTrace": [
                    "org.junit.Assert.assertEquals(Assert.java:115)",
                    "org.junit.Assert.assertEquals(Assert.java:144)",
                    "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkBSNAccepted(AanmeldingClientSteps.java:86)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                    "java.lang.reflect.Method.invoke(Method.java:606)",
                    "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                    "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                    "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                    "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                    "java.lang.Thread.run(Thread.java:745)"
                  ],
                  "suppressedExceptions": [
                    [],
                    []
                  ],
                  "fExpected": "icon-ok",
                  "fActual": "icon-warning-sign"
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                  "java.lang.Thread.run(Thread.java:745)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "3b65617a-cbb2-469d-b321-b9638ed6b058"
              },
              "parametrisedStep": "Then the BSN should be accepted",
              "durationInMillis": 20476
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "form test aanmelding client, valid BSN check",
          "meta": {
            "properties": [
              {
                "@name": "id1",
                "@value": "scenario1"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the aanmelding client form is opened",
            "When I enter a valid BSN",
            "Then the BSN should be accepted"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "FAILED"
    },
    {
      "scenario": {
        "title": "form test aanmelding client, invalid BSN check",
        "meta": {
          "properties": [
            {
              "@name": "id2",
              "@value": "scenario2"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the aanmelding client form is opened",
          "When I enter an invalid BSN",
          "Then the BSN should be rejected"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/bsnValidation.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "THEN",
              "annotatedPattern": "the BSN should be rejected",
              "resolvedPattern": "the\\s+BSN\\s+should\\s+be\\s+rejected"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I enter an invalid BSN",
              "resolvedPattern": "I\\s+enter\\s+an\\s+invalid\\s+BSN"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the aanmelding client form is opened",
              "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given the aanmelding client form is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the aanmelding client form is opened",
              "durationInMillis": 0
            },
            {
              "step": "When I enter an invalid BSN",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter an invalid BSN",
              "durationInMillis": 194
            },
            {
              "step": "Then the BSN should be rejected",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then the BSN should be rejected",
              "durationInMillis": 541
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "form test aanmelding client, invalid BSN check",
          "meta": {
            "properties": [
              {
                "@name": "id2",
                "@value": "scenario2"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the aanmelding client form is opened",
            "When I enter an invalid BSN",
            "Then the BSN should be rejected"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "NOT_PERFORMED"
    },
    {
      "scenario": {
        "title": "form test aanmelding client, already used BSN check",
        "meta": {
          "properties": [
            {
              "@name": "id3",
              "@value": "scenario3"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the aanmelding client form is opened",
          "When I enter a used BSN",
          "Then the BSN should be rejected"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/bsnValidation.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "THEN",
              "annotatedPattern": "the BSN should be rejected",
              "resolvedPattern": "the\\s+BSN\\s+should\\s+be\\s+rejected"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I enter a used BSN",
              "resolvedPattern": "I\\s+enter\\s+a\\s+used\\s+BSN"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "the aanmelding client form is opened",
              "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
            }
          ],
          "results": [
            {
              "step": "Given the aanmelding client form is opened",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given the aanmelding client form is opened",
              "durationInMillis": 0
            },
            {
              "step": "When I enter a used BSN",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter a used BSN",
              "durationInMillis": 126
            },
            {
              "step": "Then the BSN should be rejected",
              "type": "FAILED",
              "throwable": {
                "detailMessage": "Then the BSN should be rejected",
                "cause": {
                  "@class": "org.junit.ComparisonFailure",
                  "detailMessage": "",
                  "stackTrace": [
                    "org.junit.Assert.assertEquals(Assert.java:115)",
                    "org.junit.Assert.assertEquals(Assert.java:144)",
                    "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkBSNRejected(AanmeldingClientSteps.java:75)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                    "java.lang.reflect.Method.invoke(Method.java:606)",
                    "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                    "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                    "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                    "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                    "java.lang.Thread.run(Thread.java:745)"
                  ],
                  "suppressedExceptions": [
                    [],
                    []
                  ],
                  "fExpected": "icon-remove",
                  "fActual": "icon-warning-sign"
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:955)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:876)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                  "java.lang.Thread.run(Thread.java:745)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "6a957ff1-6755-483f-9bdd-14a2990016db"
              },
              "parametrisedStep": "Then the BSN should be rejected",
              "durationInMillis": 10731
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "form test aanmelding client, already used BSN check",
          "meta": {
            "properties": [
              {
                "@name": "id3",
                "@value": "scenario3"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given the aanmelding client form is opened",
            "When I enter a used BSN",
            "Then the BSN should be rejected"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "FAILED"
    },
    {
      "scenario": {
        "title": "A workflo4people frontend login attempt with both invalid credentials",
        "meta": {
          "properties": [
            {
              "@name": "id1",
              "@value": "scenario1"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given The workflow4people frontend is started",
          "When I enter invalid frontend credentials",
          "And I log in to the frontend",
          "Then I should not be logged in to the frontend"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/frontendLogin.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "WHEN",
              "annotatedPattern": "I enter invalid frontend credentials",
              "resolvedPattern": "I\\s+enter\\s+invalid\\s+frontend\\s+credentials"
            },
            {
              "type": "THEN",
              "annotatedPattern": "I should not be logged in to the frontend",
              "resolvedPattern": "I\\s+should\\s+not\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+frontend"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I log in to the frontend",
              "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+frontend"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "The workflow4people frontend is started",
              "resolvedPattern": "The\\s+workflow4people\\s+frontend\\s+is\\s+started"
            }
          ],
          "results": [
            {
              "step": "Given The workflow4people frontend is started",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given The workflow4people frontend is started",
              "durationInMillis": 2460
            },
            {
              "step": "When I enter invalid frontend credentials",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter invalid frontend credentials",
              "durationInMillis": 236
            },
            {
              "step": "And I log in to the frontend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "And I log in to the frontend",
              "durationInMillis": 5671
            },
            {
              "step": "Then I should not be logged in to the frontend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then I should not be logged in to the frontend",
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "A workflo4people frontend login attempt with both invalid credentials",
          "meta": {
            "properties": [
              {
                "@name": "id1",
                "@value": "scenario1"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given The workflow4people frontend is started",
            "When I enter invalid frontend credentials",
            "And I log in to the frontend",
            "Then I should not be logged in to the frontend"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "A workflo4people frontend login attempt with both valid credentials",
        "meta": {
          "properties": [
            {
              "@name": "id2",
              "@value": "scenario2"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given The workflow4people frontend is started",
          "When I enter valid frontend credentials",
          "And I log in to the frontend",
          "Then I should be logged in to the frontend"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/frontendLogin.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [
            {
              "type": "THEN",
              "annotatedPattern": "I should be logged in to the frontend",
              "resolvedPattern": "I\\s+should\\s+be\\s+logged\\s+in\\s+to\\s+the\\s+frontend"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I enter valid frontend credentials",
              "resolvedPattern": "I\\s+enter\\s+valid\\s+frontend\\s+credentials"
            },
            {
              "type": "WHEN",
              "annotatedPattern": "I log in to the frontend",
              "resolvedPattern": "I\\s+log\\s+in\\s+to\\s+the\\s+frontend"
            },
            {
              "type": "GIVEN",
              "annotatedPattern": "The workflow4people frontend is started",
              "resolvedPattern": "The\\s+workflow4people\\s+frontend\\s+is\\s+started"
            }
          ],
          "results": [
            {
              "step": "Given The workflow4people frontend is started",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given The workflow4people frontend is started",
              "durationInMillis": 0
            },
            {
              "step": "When I enter valid frontend credentials",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I enter valid frontend credentials",
              "durationInMillis": 484
            },
            {
              "step": "And I log in to the frontend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "And I log in to the frontend",
              "durationInMillis": 807
            },
            {
              "step": "Then I should be logged in to the frontend",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Then I should be logged in to the frontend",
              "durationInMillis": 558
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "scenario": {
          "title": "A workflo4people frontend login attempt with both valid credentials",
          "meta": {
            "properties": [
              {
                "@name": "id2",
                "@value": "scenario2"
              }
            ]
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FORMATTING",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given The workflow4people frontend is started",
            "When I enter valid frontend credentials",
            "And I log in to the frontend",
            "Then I should be logged in to the frontend"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "SUCCESSFUL"
    },
    {
      "scenario": {
        "title": "form test aanmelding client, expand aanhef list",
        "meta": {
          "properties": [
            {
              "@name": "id1",
              "@value": "scenario1"
            }
          ]
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|list|value1|value2|\n|aanhef|Heer|Mevrouw|\n|geslacht|Mannelijk|Vrouwelijk|\n|burgerlijke staat|Gehuwd|Gescheiden|\n|type relatie|Zoon|Dochter|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [
            "list",
            "value1",
            "value2"
          ],
          "data": [
            [
              [
                "list",
                "aanhef"
              ],
              [
                "value1",
                "Heer"
              ],
              [
                "value2",
                "Mevrouw"
              ],
              [
                "id1",
                "scenario1"
              ]
            ],
            [
              [
                "list",
                "geslacht"
              ],
              [
                "value1",
                "Mannelijk"
              ],
              [
                "value2",
                "Vrouwelijk"
              ],
              [
                "id1",
                "scenario1"
              ]
            ],
            [
              [
                "list",
                "burgerlijke staat"
              ],
              [
                "value1",
                "Gehuwd"
              ],
              [
                "value2",
                "Gescheiden"
              ],
              [
                "id1",
                "scenario1"
              ]
            ],
            [
              [
                "list",
                "type relatie"
              ],
              [
                "value1",
                "Zoon"
              ],
              [
                "value2",
                "Dochter"
              ],
              [
                "id1",
                "scenario1"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the aanmelding client form is opened",
          "When I expand the <list> list",
          "Then the list should be filled with at least <value1> and <value2>"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/inladenKeuzemogelijkheden.story",
      "allowed": true,
      "examplePerformableScenarios": [
        {
          "parameters": [
            [
              "list",
              "aanhef"
            ],
            [
              "value1",
              "Heer"
            ],
            [
              "value2",
              "Mevrouw"
            ],
            [
              "id1",
              "scenario1"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I expand the <list> list",
                "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the aanmelding client form is opened",
                "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
              }
            ],
            "results": [
              {
                "step": "Given the aanmelding client form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the aanmelding client form is opened",
                "durationInMillis": 0
              },
              {
                "step": "When I expand the <list> list",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I expand the ｟aanhef｠ list",
                "durationInMillis": 221
              },
              {
                "step": "Then the list should be filled with at least <value1> and <value2>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the list should be filled with at least ｟Heer｠ and ｟Mevrouw｠",
                "durationInMillis": 455
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        },
        {
          "parameters": [
            [
              "list",
              "geslacht"
            ],
            [
              "value1",
              "Mannelijk"
            ],
            [
              "value2",
              "Vrouwelijk"
            ],
            [
              "id1",
              "scenario1"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I expand the <list> list",
                "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the aanmelding client form is opened",
                "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
              }
            ],
            "results": [
              {
                "step": "Given the aanmelding client form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the aanmelding client form is opened",
                "durationInMillis": 0
              },
              {
                "step": "When I expand the <list> list",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I expand the ｟geslacht｠ list",
                "durationInMillis": 199
              },
              {
                "step": "Then the list should be filled with at least <value1> and <value2>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the list should be filled with at least ｟Mannelijk｠ and ｟Vrouwelijk｠",
                "durationInMillis": 372
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        },
        {
          "parameters": [
            [
              "list",
              "burgerlijke staat"
            ],
            [
              "value1",
              "Gehuwd"
            ],
            [
              "value2",
              "Gescheiden"
            ],
            [
              "id1",
              "scenario1"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I expand the <list> list",
                "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the aanmelding client form is opened",
                "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
              }
            ],
            "results": [
              {
                "step": "Given the aanmelding client form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the aanmelding client form is opened",
                "durationInMillis": 0
              },
              {
                "step": "When I expand the <list> list",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I expand the ｟burgerlijke staat｠ list",
                "durationInMillis": 179
              },
              {
                "step": "Then the list should be filled with at least <value1> and <value2>",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then the list should be filled with at least <value1> and <value2>",
                  "cause": {
                    "@class": "java.lang.AssertionError",
                    "detailMessage": "expected:<true> but was:<false>",
                    "stackTrace": [
                      "org.junit.Assert.fail(Assert.java:88)",
                      "org.junit.Assert.failNotEquals(Assert.java:743)",
                      "org.junit.Assert.assertEquals(Assert.java:118)",
                      "org.junit.Assert.assertEquals(Assert.java:144)",
                      "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:91)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                      "java.lang.reflect.Method.invoke(Method.java:606)",
                      "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                      "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                      "java.lang.Thread.run(Thread.java:745)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                    "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                    "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                    "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                    "java.lang.Thread.run(Thread.java:745)"
                  ],
                  "suppressedExceptions": [
                    [],
                    []
                  ],
                  "uuid": "0a7be09f-c4c7-40dc-bc74-018debab3b27"
                },
                "parametrisedStep": "Then the list should be filled with at least ｟Gehuwd｠ and ｟Gescheiden｠",
                "durationInMillis": 265
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        },
        {
          "parameters": [
            [
              "list",
              "type relatie"
            ],
            [
              "value1",
              "Zoon"
            ],
            [
              "value2",
              "Dochter"
            ],
            [
              "id1",
              "scenario1"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the list should be filled with at least <value1> and <value2>",
                "resolvedPattern": "the\\s+list\\s+should\\s+be\\s+filled\\s+with\\s+at\\s+least\\s+<value1>\\s+and\\s+<value2>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I expand the <list> list",
                "resolvedPattern": "I\\s+expand\\s+the\\s+<list>\\s+list"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the aanmelding client form is opened",
                "resolvedPattern": "the\\s+aanmelding\\s+client\\s+form\\s+is\\s+opened"
              }
            ],
            "results": [
              {
                "step": "Given the aanmelding client form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the aanmelding client form is opened",
                "durationInMillis": 0
              },
              {
                "step": "When I expand the <list> list",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I expand the ｟type relatie｠ list",
                "durationInMillis": 166
              },
              {
                "step": "Then the list should be filled with at least <value1> and <value2>",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then the list should be filled with at least <value1> and <value2>",
                  "cause": {
                    "@class": "java.lang.AssertionError",
                    "detailMessage": "expected:<true> but was:<false>",
                    "stackTrace": [
                      "org.junit.Assert.fail(Assert.java:88)",
                      "org.junit.Assert.failNotEquals(Assert.java:743)",
                      "org.junit.Assert.assertEquals(Assert.java:118)",
                      "org.junit.Assert.assertEquals(Assert.java:144)",
                      "com.test.jbehave.steps.frontend.AanmeldingClientSteps.checkListItems(AanmeldingClientSteps.java:91)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                      "java.lang.reflect.Method.invoke(Method.java:606)",
                      "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                      "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                      "java.lang.Thread.run(Thread.java:745)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:333)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1042)",
                    "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:926)",
                    "org.jbehave.core.embedder.PerformableTree$ExamplePerformableScenario.perform(PerformableTree.java:981)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:872)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:804)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:777)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:409)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:380)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:262)",
                    "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)",
                    "java.lang.Thread.run(Thread.java:745)"
                  ],
                  "suppressedExceptions": [
                    [],
                    []
                  ],
                  "uuid": "6277fae3-8c4b-44ce-b8dd-c1c169aca3a7"
                },
                "parametrisedStep": "Then the list should be filled with at least ｟Zoon｠ and ｟Dochter｠",
                "durationInMillis": 309
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        }
      ],
      "status": "FAILED"
    },
    {
      "scenario": {
        "title": "Checks if client information is correctly searchable",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FORMATTING",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|searchtype|\n|Achternaam|\n|BSN|\n|Clientnummer|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FORMATTING",
                {}
              ]
            ]
          },
          "headers": [
            "searchtype"
          ],
          "data": [
            [
              [
                "searchtype",
                "Achternaam"
              ]
            ],
            [
              [
                "searchtype",
                "BSN"
              ]
            ],
            [
              [
                "searchtype",
                "Clientnummer"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given the anamnese form is opened",
          "When I search for a client based on <searchtype>",
          "Then the correct client should be displayed"
        ]
      },
      "storyPath": "com/test/jbehave/stories/frontend/ophalenClientgegevens.story",
      "allowed": true,
      "examplePerformableScenarios": [
        {
          "parameters": [
            [
              "searchtype",
              "Achternaam"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the anamnese form is opened",
                "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the correct client should be displayed",
                "resolvedPattern": "the\\s+correct\\s+client\\s+should\\s+be\\s+displayed"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I search for a client based on <searchtype>",
                "resolvedPattern": "I\\s+search\\s+for\\s+a\\s+client\\s+based\\s+on\\s+<searchtype>"
              }
            ],
            "results": [
              {
                "step": "Given the anamnese form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the anamnese form is opened",
                "durationInMillis": 2442
              },
              {
                "step": "When I search for a client based on <searchtype>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I search for a client based on ｟Achternaam｠",
                "durationInMillis": 382
              },
              {
                "step": "Then the correct client should be displayed",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the correct client should be displayed",
                "durationInMillis": 15126
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        },
        {
          "parameters": [
            [
              "searchtype",
              "BSN"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the anamnese form is opened",
                "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the correct client should be displayed",
                "resolvedPattern": "the\\s+correct\\s+client\\s+should\\s+be\\s+displayed"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I search for a client based on <searchtype>",
                "resolvedPattern": "I\\s+search\\s+for\\s+a\\s+client\\s+based\\s+on\\s+<searchtype>"
              }
            ],
            "results": [
              {
                "step": "Given the anamnese form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the anamnese form is opened",
                "durationInMillis": 2410
              },
              {
                "step": "When I search for a client based on <searchtype>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I search for a client based on ｟BSN｠",
                "durationInMillis": 329
              },
              {
                "step": "Then the correct client should be displayed",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the correct client should be displayed",
                "durationInMillis": 7409
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        },
        {
          "parameters": [
            [
              "searchtype",
              "Clientnummer"
            ]
          ],
          "givenStories": [],
          "beforeSteps": {
            "matches": []
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the anamnese form is opened",
                "resolvedPattern": "the\\s+anamnese\\s+form\\s+is\\s+opened"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the correct client should be displayed",
                "resolvedPattern": "the\\s+correct\\s+client\\s+should\\s+be\\s+displayed"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I search for a client based on <searchtype>",
                "resolvedPattern": "I\\s+search\\s+for\\s+a\\s+client\\s+based\\s+on\\s+<searchtype>"
              }
            ],
            "results": [
              {
                "step": "Given the anamnese form is opened",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the anamnese form is opened",
                "durationInMillis": 2338
              },
              {
                "step": "When I search for a client based on <searchtype>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I search for a client based on ｟Clientnummer｠",
                "durationInMillis": 316
              },
              {
                "step": "Then the correct client should be displayed",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the correct client should be displayed",
                "durationInMillis": 3716
              }
            ]
          },
          "afterSteps": {
            "matches": []
          }
        }
      ],
      "status": "SUCCESSFUL"
    }
  ]
}}